[{"content":"\u003ch2 id=\"some-math\"\u003eSome math\u003c/h2\u003e\n\u003cp\u003e$\\frac{1}{2}\\sum\\int$\n$$\\left\\langle \\img{/images/Pythagoras.jpeg} \\right\\rangle$$\n$\\mathbb{R}$\u003c/p\u003e\n\u003ch2 id=\"a-pdf\"\u003eA pdf\u003c/h2\u003e\n\u003cscript type=\"text/javascript\" src= '/js/pdf-js/build/pdf.js'\u003e\u003c/script\u003e\r\n\u003cstyle\u003e\r\n#the-canvas {\r\n  border: 1px solid var(--bs-orange);\r\n  direction: ltr;\r\n  width: 100%;\r\n  height: auto;\r\n  display: none;\r\n}\r\n\r\n#paginator {\r\n  display: none;\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n#loadingWrapper {\r\n  display: none;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 350px;\r\n}\r\n\r\n#loading {\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid var(--bs-orange);\r\n  border-radius: 50%;\r\n  border-top-color: var(--bs-orange);\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to { -webkit-transform: rotate(360deg); }\r\n}\r\n@-webkit-keyframes spin {\r\n  to { -webkit-transform: rotate(360deg); }\r\n}\r\n.pdfbtn {\r\n  background-color: var(--bs-orange);  \r\n  border: none;\r\n  color: var(--r-font);\r\n  padding: 15px 32px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 16px;\r\n}\r\n\u003c/style\u003e\r\n\r\n\u003cdiv id=\"paginator\"\u003e\r\n    \u003cbutton class=\"pdfbtn\" id=\"prev\"\u003ePrevious\u003c/button\u003e\r\n    \u003cbutton class=\"pdfbtn\" id=\"next\"\u003eNext\u003c/button\u003e\r\n\u003c/div\u003e\r\n\u003cdiv id=\"embed-pdf-container\"\u003e\r\n    \u003cdiv id=\"loadingWrapper\"\u003e\r\n      \u003cdiv id=\"loading\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n    \u003ccanvas id=\"the-canvas\"\u003e\u003c/canvas\u003e\r\n  \u003c/div\u003e\r\n  \u003cdiv id=\"paginator2\"\u003e\r\n    \u003cbutton class=\"pdfbtn\" id=\"prev2\"\u003ePrevious\u003c/button\u003e\r\n    \u003cbutton class=\"pdfbtn\" id=\"next2\"\u003eNext\u003c/button\u003e\r\n    \u0026nbsp;\r\n    \u0026nbsp;\r\n    \u003cspan\u003ePage: \u003cspan id=\"page_num\"\u003e\u003c/span\u003e / \u003cspan id=\"page_count\"\u003e\u003c/span\u003e\u003c/span\u003e\r\n\u003c/div\u003e\r\n\u003cscript type=\"text/javascript\"\u003e\r\nwindow.onload = function() {\r\n\r\n\r\nvar url = \"https:\\/\\/jacobmill.org\" + 'docs\\/Pythagoras.pdf';\r\n\r\nvar hidePaginator = \"\" === \"true\";\r\nvar hideLoader = \"\" === \"true\";\r\nvar selectedPageNum = parseInt(\"\") || 1;\r\n\r\n\r\nvar pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc = \"https:\\/\\/jacobmill.org\" + '/js/pdf-js/build/pdf.worker.js';\r\n\r\n\r\nvar pdfDoc = null,\r\n    pageNum = selectedPageNum,\r\n    pageRendering = false,\r\n    pageNumPending = null,\r\n    scale = 3,\r\n    canvas = document.getElementById('the-canvas'),\r\n    ctx = canvas.getContext('2d'),\r\n    paginator = document.getElementById(\"paginator\"),\r\n    loadingWrapper = document.getElementById('loadingWrapper');\r\n\r\n\r\n\r\nshowPaginator();\r\nshowLoader();\r\n\r\n\n\r\nfunction renderPage(num) {\r\n  pageRendering = true;\r\n  \r\n  pdfDoc.getPage(num).then(function(page) {\r\n    var viewport = page.getViewport({scale: scale});\r\n    canvas.height = viewport.height;\r\n    canvas.width = viewport.width;\r\n\r\n    \r\n    var renderContext = {\r\n      canvasContext: ctx,\r\n      viewport: viewport\r\n    };\r\n    var renderTask = page.render(renderContext);\r\n\r\n    \r\n    renderTask.promise.then(function() {\r\n      pageRendering = false;\r\n      showContent();\r\n\r\n      if (pageNumPending !== null) {\r\n        \r\n        renderPage(pageNumPending);\r\n        pageNumPending = null;\r\n      }\r\n    });\r\n  });\r\n\r\n  \r\n  document.getElementById('page_num').textContent = num;\r\n}\r\n\r\n\n\r\nfunction showContent() {\r\n  loadingWrapper.style.display = 'none';\r\n  canvas.style.display = 'block';\r\n}\r\n\r\n\n\r\nfunction showLoader() {\r\n  if(hideLoader) return\r\n  loadingWrapper.style.display = 'flex';\r\n  canvas.style.display = 'none';\r\n}\r\n\r\n\n\r\nfunction showPaginator() {\r\n  if(hidePaginator) return\r\n  paginator.style.display = 'block';\r\n}\r\n\r\n\n\r\nfunction queueRenderPage(num) {\r\n  if (pageRendering) {\r\n    pageNumPending = num;\r\n  } else {\r\n    renderPage(num);\r\n  }\r\n}\r\n\r\n\n\r\nfunction onPrevPage() {\r\n  if (pageNum \u003c= 1) {\r\n    return;\r\n  }\r\n  pageNum--;\r\n  queueRenderPage(pageNum);\r\n}\r\ndocument.getElementById('prev').addEventListener('click', onPrevPage);\r\ndocument.getElementById('prev2').addEventListener('click', onPrevPage);\r\n\r\n\n\r\nfunction onNextPage() {\r\n  if (pageNum \u003e= pdfDoc.numPages) {\r\n    return;\r\n  }\r\n  pageNum++;\r\n  queueRenderPage(pageNum);\r\n}\r\ndocument.getElementById('next').addEventListener('click', onNextPage);\r\ndocument.getElementById('next2').addEventListener('click', onNextPage);\r\n\r\n\n\r\npdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {\r\n  pdfDoc = pdfDoc_;\r\n  var numPages = pdfDoc.numPages;\r\n  document.getElementById('page_count').textContent = numPages;\r\n\r\n  \r\n  if(pageNum \u003e numPages) {\r\n    pageNum = numPages\r\n  }\r\n\r\n  \r\n  renderPage(pageNum);\r\n});\r\n}\r\n\r\n\u003c/script\u003e\r\n\n\u003ch2 id=\"some-text\"\u003eSome text\u003c/h2\u003e\n\u003cp\u003ePellentesque id mollis ligula. Aliquam erat volutpat. Donec quis turpis nec lacus finibus semper quis a libero. Vestibulum hendrerit velit sit amet elit scelerisque egestas. Pellentesque ut orci rutrum diam dignissim pulvinar. Vivamus varius est quis lacus fermentum viverra. Maecenas vel massa venenatis, laoreet lorem eget, pellentesque metus. Vestibulum ultrices mauris ac nunc elementum tincidunt nec a lectus. Sed non urna massa. Suspendisse potenti. Vestibulum at lacinia nunc. Nam sed elit ultricies, interdum purus pulvinar, ultrices massa.\u003c/p\u003e\n\u003cp\u003eNulla blandit interdum quam vel imperdiet. Suspendisse et purus ut nibh imperdiet mollis. Ut tempus suscipit sapien, quis sollicitudin est aliquet a. Phasellus dignissim vestibulum est, eget gravida nisl laoreet eu. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam convallis arcu velit, in iaculis dolor dictum vitae. Duis imperdiet tellus non velit cursus luctus. Nam iaculis, ex id consequat viverra, lacus risus varius tellus, a lacinia lacus purus ut mauris. Suspendisse vulputate velit vitae dui dignissim, eget aliquet quam congue. Proin faucibus mauris quis augue euismod, sit amet cursus augue finibus. Nullam et elementum libero, congue mollis magna. Quisque in rutrum ligula.\u003c/p\u003e\n\u003ch2 id=\"a-video\"\u003eA video\u003c/h2\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/eBGIQ7ZuuiU\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n","description":"","image":null,"permalink":"https://jacobmill.org/publications/talk1/","title":"Proin ac purus venenatis, volutpat lorem non, rutrum lacus"},{"content":"\u003cp\u003ePellentesque id mollis ligula. Aliquam erat volutpat. Donec quis turpis nec lacus finibus semper quis a libero. Vestibulum hendrerit velit sit amet elit scelerisque egestas. Pellentesque ut orci rutrum diam dignissim pulvinar. Vivamus varius est quis lacus fermentum viverra. Maecenas vel massa venenatis, laoreet lorem eget, pellentesque metus. Vestibulum ultrices mauris ac nunc elementum tincidunt nec a lectus. Sed non urna massa. Suspendisse potenti. Vestibulum at lacinia nunc. Nam sed elit ultricies, interdum purus pulvinar, ultrices massa.\u003c/p\u003e\n\u003cp\u003eNulla blandit interdum quam vel imperdiet. Suspendisse et purus ut nibh imperdiet mollis. Ut tempus suscipit sapien, quis sollicitudin est aliquet a. Phasellus dignissim vestibulum est, eget gravida nisl laoreet eu. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam convallis arcu velit, in iaculis dolor dictum vitae. Duis imperdiet tellus non velit cursus luctus. Nam iaculis, ex id consequat viverra, lacus risus varius tellus, a lacinia lacus purus ut mauris. Suspendisse vulputate velit vitae dui dignissim, eget aliquet quam congue. Proin faucibus mauris quis augue euismod, sit amet cursus augue finibus. Nullam et elementum libero, congue mollis magna. Quisque in rutrum ligula.\u003c/p\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/eBGIQ7ZuuiU\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n","description":"","image":null,"permalink":"https://jacobmill.org/another_section/item2/","title":"Proin ac purus venenatis, volutpat lorem non, rutrum lacus"},{"content":"\u003cp\u003ePellentesque id mollis ligula. Aliquam erat volutpat. Donec quis turpis nec lacus finibus semper quis a libero. Vestibulum hendrerit velit sit amet elit scelerisque egestas. Pellentesque ut orci rutrum diam dignissim pulvinar. Vivamus varius est quis lacus fermentum viverra. Maecenas vel massa venenatis, laoreet lorem eget, pellentesque metus. Vestibulum ultrices mauris ac nunc elementum tincidunt nec a lectus. Sed non urna massa. Suspendisse potenti. Vestibulum at lacinia nunc. Nam sed elit ultricies, interdum purus pulvinar, ultrices massa.\u003c/p\u003e\n\u003cp\u003eNulla blandit interdum quam vel imperdiet. Suspendisse et purus ut nibh imperdiet mollis. Ut tempus suscipit sapien, quis sollicitudin est aliquet a. Phasellus dignissim vestibulum est, eget gravida nisl laoreet eu. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam convallis arcu velit, in iaculis dolor dictum vitae. Duis imperdiet tellus non velit cursus luctus. Nam iaculis, ex id consequat viverra, lacus risus varius tellus, a lacinia lacus purus ut mauris. Suspendisse vulputate velit vitae dui dignissim, eget aliquet quam congue. Proin faucibus mauris quis augue euismod, sit amet cursus augue finibus. Nullam et elementum libero, congue mollis magna. Quisque in rutrum ligula.\u003c/p\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/eBGIQ7ZuuiU\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n","description":"","image":null,"permalink":"https://jacobmill.org/publications/talk2/","title":"Proin ac purus venenatis, volutpat lorem non, rutrum lacus"},{"content":"","description":"My gallery :earth_asia:","image":null,"permalink":"https://jacobmill.org/another_section/item1/","title":"Image Gallery"},{"content":"\u003cp\u003eI was recently asked to write up a proposal for a repository workflow. The\nresult is in no way original but is a simplification of some of the branching\nstrategies found in\n\u003ca href=\"https://medium.com/novai-devops-101/top-4-branching-strategies-and-their-comparison-a-guide-with-recommendations-21071e1c472a\"\u003ethis article.\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"common-github-workflow-problems\"\u003eCommon GitHub Workflow Problems\u003c/h2\u003e\n\u003cp\u003eMany GitHub repositories have a simple workflow where contributors create\nfeature branches directly off \u003ccode\u003emain\u003c/code\u003e and eventually merge back into it.\nThis is a nice solution for small or proof-of-concept projects where stable\nproduction level code is not life or death. However, as the code-base and\ncontributor size grows this strategy has challenges:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStability risks\u003c/strong\u003e: Direct merges to \u003ccode\u003emain\u003c/code\u003e can and will introduce bugs to\nproduction code\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIntegration issues\u003c/strong\u003e: Feature changes tested in isolation may conflict when\ncombined\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eContributor friction\u003c/strong\u003e: External contributors without write permissions\nmust fork, which creates a disjointed development experience over time\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnclear progression\u003c/strong\u003e: Without intermediate stages, the path from\ncontribution to production is not clear\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"the-dev-branch-solution\"\u003eThe Dev Branch Solution\u003c/h2\u003e\n\u003cp\u003eA dedicated dev branch creates a middle ground between initial development and\nproduction-ready code. Here\u0026rsquo;s how this one simple trick can drastically\nimprove one\u0026rsquo;s workflow:\u003c/p\u003e\n\u003ch3 id=\"branch-structure\"\u003eBranch Structure\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003efeature branches\u003c/code\u003e -\u0026gt; \u003ccode\u003edev\u003c/code\u003e -\u0026gt; \u003ccode\u003emain\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis creates a clear progression which quarantines unstable in-progress work\nfrom production code.\u003c/p\u003e\n\u003ch3 id=\"why-this-works\"\u003eWhy This Works\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eProtected Production Environment\u003c/strong\u003e: The \u003ccode\u003emain\u003c/code\u003e branch remains stable with\nan additional verification layer\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIntegration Testing\u003c/strong\u003e: The \u003ccode\u003edev\u003c/code\u003e branch serves as a place to catch\nconflicts between features\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCleaner Collaboration\u003c/strong\u003e: Work stays centralized rather than scattered\nacross multiple forks\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eContributor Progression\u003c/strong\u003e: Contributors can see a structured path to\ngaining increased project responsibility\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese are extremely applicable for my current use case since academic software\ntends to have a consistent revolving door of contributors with varying levels\nof experience/expertise.\u003c/p\u003e\n\u003ch2 id=\"implementing-this-workflow\"\u003eImplementing This Workflow\u003c/h2\u003e\n\u003ch3 id=\"for-core-team-members\"\u003eFor Core Team Members\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eCreate feature branches from the dev branch:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit switch dev\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit pull    \u003cspan style=\"color:#75715e\"\u003e# Keep dev updated\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit switch -c feature-name    \u003cspan style=\"color:#75715e\"\u003e# New branch based on dev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eDevelop and test your changes locally.\u003c/li\u003e\n\u003cli\u003ePush the feature branch to the repository:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit push origin feature-name\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eOpen a pull request to the \u003ccode\u003edev\u003c/code\u003e branch (not \u003ccode\u003emain\u003c/code\u003e)\u0026hellip; never touch \u003ccode\u003emain\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAfter review, repository administrators can merge a stable \u003ccode\u003edev\u003c/code\u003e branch to\n\u003ccode\u003emain\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"for-external-contributors\"\u003eFor External Contributors\u003c/h3\u003e\n\u003cp\u003ePeople who aren\u0026rsquo;t a part of the organization still have the option to fork the\nrepository and submit pull requests as usual. The workflow for these\ncontributors should be similar:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFork repository\u003c/li\u003e\n\u003cli\u003eCreate a feature branch on their fork\u003c/li\u003e\n\u003cli\u003eSubmit a pull request from the feature to the \u003ccode\u003edev\u003c/code\u003e branch\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"branch-protection\"\u003eBranch Protection\u003c/h3\u003e\n\u003cp\u003eTo gain the benefits of this setup it is advisable to have the following\nprotection settings/policies:\u003c/p\u003e\n\u003ch4 id=\"main-branch\"\u003eMain Branch:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRequire code review approval before merging\u003c/li\u003e\n\u003cli\u003eRestrict merge permissions solely to administrators\u003c/li\u003e\n\u003cli\u003eDisable direct pushes (can only PR from \u003ccode\u003edev\u003c/code\u003e to \u003ccode\u003emain\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eRequire all tests and checks pass\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"dev-branch\"\u003eDev Branch:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDisable direct pushes except in emergencies\n\u003cul\u003e\n\u003cli\u003eAll changes to \u003ccode\u003edev\u003c/code\u003e should really be coming through PRs from\nfeature branches.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRequire tests and checks to pass\u003c/li\u003e\n\u003cli\u003eRequire review from an administrator or maintainer\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"permissions\"\u003ePermissions\u003c/h3\u003e\n\u003cp\u003eThis structure inherently creates a progression of responsibilty/trust:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAdministrators\u003c/strong\u003e: Full repository control, are primarily responsible for\n\u003ccode\u003edev\u003c/code\u003e -\u0026gt; \u003ccode\u003emain\u003c/code\u003e merges and can do basically anything they need to\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMaintainers\u003c/strong\u003e: can approve PRs to \u003ccode\u003edev\u003c/code\u003e, manage issues, can give preliminary\ncode reviews\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDevelopers\u003c/strong\u003e: Can create feature branches inside of the organization repository\nwithout the need to fork\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eContributor\u003c/strong\u003e: Not a part of the organization or are required to fork and\nsubmit PRs from their feature branches to \u003ccode\u003edev\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis creates a natural advancement path:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNew contributors start by forking and submitting PRs\u003c/li\u003e\n\u003cli\u003eAfter quality contributions, grant them direct repository access\u003c/li\u003e\n\u003cli\u003eAs trust builds, they can become maintainers with review privileges\u003c/li\u003e\n\u003cli\u003eEventually, trusted maintainers might become administrators\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;The Wheel of Time turns, and Ages come and pass, leaving memories that become\nlegend.\u0026rdquo;\u003c/em\u003e\u003c/p\u003e\n","description":"A breakdown of a common repository workflow.","image":null,"permalink":"https://jacobmill.org/blog/blog1/","title":"Implementing a Dev Branch"}]